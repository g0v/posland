// Generated by LiveScript 1.2.0
(function(){
  var http, url, fs, querystring, request, json, base, server, replace$ = ''.replace;
  http = require('http');
  url = require('url');
  fs = require('fs');
  querystring = require('querystring');
  request = require('request');
  json = JSON.parse(fs.readFileSync('section.json', 'utf-8'));
  base = 'http://landmaps.nlsc.gov.tw/S_Maps/qryTileMapIndex';
  server = http.createServer(function(req, res){
    var p, q, addr, matches, uri, cityArea, areaId, sec, secId, num, office, query;
    p = url.parse(decodeURIComponent(req.url));
    q = querystring.parse(p.query);
    if (q.address != null) {
      addr = q.address.replace(/台/g, '臺');
      matches = /(..(?:市|縣))(.{1,2}(?:鄉|鎮|市|區))(.{2,8}段)(.*)/gi.exec(addr);
      uri = '';
      if (matches != null) {
        cityArea = matches[1] + matches[2];
        if (typeof json.area[cityArea] !== 'undefined') {
          areaId = json.area[cityArea];
          sec = matches[3];
          if (typeof json.section[areaId][sec] !== 'undefined') {
            secId = json.section[areaId][sec].id;
            num = replace$.call(matches[4], /[^\d]/g, '');
            office = json.section[areaId][sec].o;
            if (num != null) {
              if (q.magic != null) {
                query = "lands[]=" + matches[1] + ',' + sec + ',' + num;
                res.writeHead(200, {
                  'Content-Type': 'text/plain'
                });
                return res.end(query);
              } else {
                query = {
                  'flag': 2,
                  'office': office,
                  'sect': secId,
                  'landno': num
                };
                uri = base + '?' + querystring.stringify(query);
                return request({
                  'url': uri,
                  'encoding': 'utf-8',
                  'method': 'GET'
                }, function(error, response, body){
                  var result;
                  result = JSON.parse(body);
                  result.push('source: ' + uri);
                  res.writeHead(200, {
                    'Content-Type': 'application/json'
                  });
                  return res.end(JSON.stringify(result));
                });
              }
            }
          }
        }
      } else {
        res.writeHead(200, {
          'Content-Type': 'text/plain'
        });
        return res.end('404');
      }
    } else {
      res.writeHead(200, {
        'Content-Type': 'text/plain'
      });
      return res.end('404');
    }
  });
  server.listen(9192);
}).call(this);
